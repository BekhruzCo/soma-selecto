
"""
Telegram Bot for Denov Baraka Somsa

This bot integrates with the web application to receive orders
and update order statuses via Telegram.

To run this bot:
1. Install requirements: pip install aiogram python-dotenv
2. Create a .env file with BOT_TOKEN and CHANNEL_ID
3. Run this script: python telegram_bot.py
"""

import asyncio
import json
import logging
from datetime import datetime
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Bot token from @BotFather
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")

# Channel/group ID where orders will be sent
CHANNEL_ID = os.getenv("CHANNEL_ID", "YOUR_CHANNEL_ID")

# Admin IDs who can access admin commands
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

# Main router
router = Router()

# States for adding products
class ProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_category = State()
    waiting_for_image = State()

# Store orders in memory (in production, use a database)
orders = {}

# In-memory product storage (in production, use a database)
products = []

# Keyboard for order status actions
def get_order_keyboard(order_id):
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"deliver_{order_id}"),
            InlineKeyboardButton(text="‚úì –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{order_id}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# Keyboard for admin actions
def get_admin_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
            InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="admin_products")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# Start command handler
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ Denov Baraka Somsa. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Denov Baraka Somsa. "
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å."
        )

# Admin command handler
@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Denov Baraka Somsa",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# Help command handler
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/admin - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/products - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""
    else:
        help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status [–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
"""
    await message.answer(help_text)

# Orders command handler
@router.message(Command("orders"))
async def cmd_orders(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not orders:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    active_orders = {id: order for id, order in orders.items() 
                     if order["status"] not in ["completed", "cancelled"]}
    
    if not active_orders:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    for order_id, order in active_orders.items():
        order_text = f"""
–ó–∞–∫–∞–∑ #{order_id}
–°—Ç–∞—Ç—É—Å: {get_status_text(order["status"])}
–ö–ª–∏–µ–Ω—Ç: {order["customer"]["name"]}
–¢–µ–ª–µ—Ñ–æ–Ω: {order["customer"]["phone"]}
–ê–¥—Ä–µ—Å: {order["customer"]["address"]}
–°—É–º–º–∞: {order["total"]} —Å—É–º
"""
        await message.answer(order_text, reply_markup=get_order_keyboard(order_id))

# Products command handler
@router.message(Command("products"))
async def cmd_products(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not products:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    for product in products:
        product_text = f"""
üçΩ {product["name"]}
üìù {product["description"]}
üí∞ {product["price"]} —Å—É–º
üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product["category"]}
"""
        await message.answer(product_text)

# Statistics command handler
@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not orders:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö.")
        return
    
    total_orders = len(orders)
    completed_orders = len([o for o in orders.values() if o["status"] == "completed"])
    cancelled_orders = len([o for o in orders.values() if o["status"] == "cancelled"])
    active_orders = total_orders - completed_orders - cancelled_orders
    
    total_revenue = sum([o["total"] for o in orders.values() if o["status"] == "completed"])
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:

–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {active_orders}
–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {completed_orders}
–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {cancelled_orders}

üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Å—É–º
"""
    await message.answer(stats_text)

# Status command handler
@router.message(Command("status"))
async def cmd_status(message: types.Message):
    # Parse order ID from command (e.g., /status 12345)
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: /status [–Ω–æ–º–µ—Ä]")
        return
    
    order_id = command_parts[1]
    
    if order_id not in orders:
        await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    order = orders[order_id]
    
    status_texts = {
        "processing": "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "delivering": "–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "completed": "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
        "cancelled": "–æ—Ç–º–µ–Ω–µ–Ω"
    }
    
    status_text = status_texts.get(order["status"], "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    
    response_text = f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id}: {status_text}"
    await message.answer(response_text)

# Helper function to get status text
def get_status_text(status):
    status_map = {
        "processing": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "delivering": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "completed": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
    }
    return status_map.get(status, status)

# Add product handler
@router.callback_query(lambda c: c.data == "add_product")
async def add_product_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductStates.waiting_for_name)
    await callback.answer()

@router.message(ProductStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductStates.waiting_for_description)

@router.message(ProductStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(ProductStates.waiting_for_price)

@router.message(ProductStates.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ProductStates.waiting_for_category)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@router.message(ProductStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥):")
    await state.set_state(ProductStates.waiting_for_image)

@router.message(ProductStates.waiting_for_image)
async def process_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if message.photo:
        # In a real app, you would save the photo or its file_id
        image = message.photo[-1].file_id
    else:
        image = None
    
    new_product = {
        "id": f"p{len(products) + 1}",
        "name": data["name"],
        "description": data["description"],
        "price": data["price"],
        "category": data["category"],
        "image": image
    }
    
    products.append(new_product)
    
    await message.answer(f"–¢–æ–≤–∞—Ä '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

# Callback query handler for order actions
@router.callback_query(lambda c: c.data.startswith(("accept_", "deliver_", "complete_", "cancel_")))
async def order_actions(callback: types.CallbackQuery):
    data = callback.data
    
    # Parse action and order_id from callback data
    if "_" in data:
        action, order_id = data.split("_", 1)
        
        if order_id not in orders:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        order = orders[order_id]
        
        if action == "accept":
            order["status"] = "processing"
            status_text = "–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"
        elif action == "deliver":
            order["status"] = "delivering"
            status_text = "–ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É"
        elif action == "complete":
            order["status"] = "completed"
            status_text = "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif action == "cancel":
            order["status"] = "cancelled"
            status_text = "–æ—Ç–º–µ–Ω–µ–Ω"
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            return
        
        # Update order status
        orders[order_id] = order
        
        # Update message with new keyboard
        order_text = f"""
–ó–∞–∫–∞–∑ #{order_id}
–°—Ç–∞—Ç—É—Å: {get_status_text(order["status"])}
–ö–ª–∏–µ–Ω—Ç: {order["customer"]["name"]}
–¢–µ–ª–µ—Ñ–æ–Ω: {order["customer"]["phone"]}
–ê–¥—Ä–µ—Å: {order["customer"]["address"]}
–°—É–º–º–∞: {order["total"]} —Å—É–º
"""
        await callback.message.edit_text(order_text, reply_markup=get_order_keyboard(order_id))
        await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id} {status_text}")

# Callback query handler for admin menu
@router.callback_query(lambda c: c.data.startswith("admin_"))
async def admin_menu_actions(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    action = callback.data.split("_")[1]
    
    if action == "orders":
        await cmd_orders(callback.message)
    elif action == "products":
        await cmd_products(callback.message)
    elif action == "stats":
        await cmd_stats(callback.message)
    else:
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    await callback.answer()

# Webhook handler for receiving orders from the website
@router.message()
async def handle_webhook_data(message: types.Message):
    # Only process messages with JSON data
    if message.from_user.is_bot or not message.text.startswith("{"):
        return
    
    try:
        # Parse the order data from JSON
        order_data = json.loads(message.text)
        
        # Validate order data
        if not isinstance(order_data, dict) or "id" not in order_data:
            return
        
        order_id = order_data["id"][-5:]  # Last 5 digits
        
        # Store the order
        orders[order_id] = order_data
        
        # Format items text
        items_text = "\n".join([
            f"- {item['name']} x {item['quantity']} = {item['price'] * item['quantity']} —Å—É–º"
            for item in order_data["items"]
        ])
        
        # Calculate delivery
        delivery_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if order_data.get("freeDelivery") else "15,000 —Å—É–º"
        total_with_delivery = order_data["total"]
        if not order_data.get("freeDelivery"):
            total_with_delivery += 15000
        
        # Format order message
        order_text = f"""
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}!

üë§ –ö–ª–∏–µ–Ω—Ç: {order_data["customer"]["name"]}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data["customer"]["phone"]}
üè† –ê–¥—Ä–µ—Å: {order_data["customer"]["address"]}

üõí –¢–æ–≤–∞—Ä—ã:
{items_text}

üí∞ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {order_data["total"]} —Å—É–º
üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}
üíµ –ò—Ç–æ–≥–æ: {total_with_delivery} —Å—É–º
"""
        # Send to channel/group
        if CHANNEL_ID:
            await bot.send_message(
                CHANNEL_ID,
                order_text,
                reply_markup=get_order_keyboard(order_id)
            )
        
        # Reply to the webhook
        await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç.")
    
    except json.JSONDecodeError:
        # Not JSON data, ignore
        pass
    except Exception as e:
        logging.error(f"Error processing order: {e}")

async def main():
    # Initialize Bot instance with a default parse mode
    global bot
    bot = Bot(token=BOT_TOKEN)
    
    # Set up storage and dispatcher
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # Register router
    dp.include_router(router)
    
    # Skip pending updates and start polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.info("Starting bot...")
    asyncio.run(main())
